apiVersion: v1
kind: Template

labels:
  application: scoring-server

metadata:
  name: scoring-server

parameters:
  - name: APPLICATION_NAME
    value: scoring-server
    required: true
  - name: SECRET_NAME
    value: scoring-server-secret
    required: true
  - name: DATAGRID_HOST
    value: datagrid-service.datagrid-demo.svc.cluster.local
    required: true
  - name: DATAGRID_HOTROD_PORT
    value: "11222"
    required: true
  - name: KAFKA_BROKER_LIST_HOST
    value: demo2020-kafka-bootstrap.kafka-demo.svc
    required: true
  - name: KAFKA_BROKER_LIST_PORT
    value: "9092"
    required: true
  - name: KAFKA_TRANSACTION_TOPIC
    value: "my-topic"
    required: true
  - name: REPLICAS
    value: "1"
    required: true
  - name: PORT
    value: "8080"
    required: true
  - name: IP
    value: "0.0.0.0"
    required: true
  - name: IMAGE_REPOSITORY
    value: quay.io/redhatdemo/2020-scoring-server:latest
    required: true
  - name: CONTAINER_REQUEST_CPU
    value: 200m
  - name: CONTAINER_REQUEST_MEMORY
    value: 400Mi
  - name: CONTAINER_LIMIT_CPU
    value: 200m
  - name: CONTAINER_LIMIT_MEMORY
    value: 400Mi

objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${SECRET_NAME}
    data:
    stringData:
      DATAGRID_HOST: ${DATAGRID_HOST}
      DATAGRID_HOTROD_PORT: ${DATAGRID_HOTROD_PORT}
      KAFKA_BROKER_LIST_HOST: ${KAFKA_BROKER_LIST_HOST}
      KAFKA_BROKER_LIST_PORT: ${KAFKA_BROKER_LIST_PORT}
      KAFKA_TRANSACTION_TOPIC: ${KAFKA_TRANSACTION_TOPIC}

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      replicas: ${{REPLICAS}}
      selector:
        deploymentconfig: ${APPLICATION_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}
        spec:
          containers:
            - env:
                - name: IP
                  value: "${IP}"
                - name: PORT
                  value: "${PORT}"
              envFrom:
                - secretRef:
                    name: ${SECRET_NAME}
              image: ${IMAGE_REPOSITORY}
              imagePullPolicy: Always
              name: ${APPLICATION_NAME}
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CONTAINER_REQUEST_CPU}
                  memory: ${CONTAINER_REQUEST_MEMORY}
                limits:
                  cpu: ${CONTAINER_LIMIT_CPU}
                  memory: ${CONTAINER_LIMIT_MEMORY}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                httpGet:
                  path: /status
                  port: 8080
                  scheme: HTTP
              livenessProbe:
                httpGet:
                  path: /status
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 30
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${APPLICATION_NAME}
